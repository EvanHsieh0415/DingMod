package io.github.nitiaonstudio.ding.data.resources.util;

import io.github.nitiaonstudio.ding.data.RBI;
import io.github.nitiaonstudio.ding.data.resources.Utils;
import lombok.experimental.ExtensionMethod;
import net.minecraft.resources.ResourceLocation;

import java.awt.*;
import java.util.concurrent.ConcurrentHashMap;
@ExtensionMethod({Utils.class})
public class ForgeHammerBase extends AbstractBase {
    public ForgeHammerBase(ConcurrentHashMap<ResourceLocation, RBI> cmp) {
        super(cmp);
    }

    @Override
    public void factory(ResourceLocation id, Color... colors) {
        cmp.addResources(id, 39, 31, img -> {
            img
                    .color(colors[0])
                    .rec(0, 0, 1, 2)
                    .rec(0, 4, 1, 3)
                    .rec(0, 8, 1, 1)
                    .rec(0, 16, 1, 1)
                    .rec(1, 10, 2, 1)
                    .rec(1, 14, 2, 1)
                    .rec(2, 11, 1, 4)
                    .rec(3, 8, 1, 1)
                    .rec(3, 16, 1, 1)
                    .rec(5, 10, 2, 1)
                    .rec(5, 14, 2, 1)
                    .rec(6, 11, 1, 4)
                    .rec(8, 0, 1, 3)
                    .rec(8, 4, 1, 2)
                    .rec(8, 9, 1, 2)
                    .rec(8, 13, 1, 2)
                    .rec(9, 3, 1, 2)
                    .rec(10, 13, 1, 2)
                    .rec(11, 9, 1, 2)
                    .rec(12, 3, 1, 2)
                    .rec(12, 9, 1, 4)
                    .rec(13, 11, 1, 2)
                    .rec(14, 3, 1, 2)
                    .color(colors[1])
                    .rec(0, 2, 1, 2)
                    .rec(0, 7, 1, 1)
                    .rec(4, 8, 1, 1)
                    .rec(4, 16, 1, 1)
                    .rec(7, 8, 1, 1)
                    .rec(7, 16, 1, 1)
                    .rec(8, 3, 1, 1)
                    .rec(8, 6, 1, 2)
                    .rec(8, 11, 1, 2)
                    .rec(9, 5, 1, 2)
                    .rec(11, 11, 1, 2)
                    .rec(12, 5, 1, 2)
                    .color(colors[2])
                    .rec(0, 9, 4, 1)
                    .rec(0, 15, 4, 1)
                    .rec(1, 0, 1, 1)
                    .rec(1, 4, 1, 1)
                    .rec(7, 0, 1, 1)
                    .rec(7, 4, 1, 1)
                    .color(colors[3])
                    .rec(0, 10, 1, 5)
                    .rec(2, 0, 5, 1)
                    .rec(2, 3, 5, 1)
                    .rec(4, 10, 1, 5)
                    .color(colors[4])
                    .rec(1, 1, 1, 2)
                    .rec(1, 5, 1, 2)
                    .rec(7, 1, 1, 2)
                    .rec(7, 5, 1, 2)
                    .color(colors[5])
                    .rec(1, 3, 1, 1)
                    .rec(1, 7, 1, 1)
                    .rec(4, 9, 4, 1)
                    .rec(4, 15, 4, 1)
                    .rec(7, 3, 1, 1)
                    .rec(7, 7, 1, 1)
                    .color(colors[6])
                    .rec(1, 8, 2, 1)
                    .rec(1, 16, 2, 1)
                    .rec(2, 4, 1, 5)
                    .rec(3, 4, 4, 1)
                    .rec(3, 7, 4, 1)
                    .rec(3, 10, 1, 5)
                    .rec(6, 5, 1, 3)
                    .rec(7, 10, 1, 5)
                    .rec(9, 9, 2, 1)
                    .rec(9, 13, 1, 2)
                    .rec(10, 3, 2, 1)
                    .rec(11, 13, 1, 2)
                    .rec(13, 3, 1, 4)
                    .rec(13, 9, 1, 2)
                    .rec(14, 5, 1, 2)
                    .color(colors[7])
                    .rec(1, 11, 1, 3)
                    .rec(4, 5, 1, 2)
                    .rec(5, 11, 1, 3)
                    .color(colors[8])
                    .rec(2, 1, 1, 2)
                    .rec(6, 1, 1, 2)
                    .color(colors[9])
                    .rec(3, 1, 1, 2)
                    .rec(4, 1, 1, 2)
                    .rec(5, 1, 1, 2)
                    .color(colors[10])
                    .rec(3, 5, 1, 2)
                    .rec(5, 5, 1, 2)
                    .color(colors[11])
                    .rec(5, 8, 2, 1)
                    .rec(5, 16, 2, 1)
                    .rec(9, 12, 2, 1)
                    .rec(10, 6, 2, 1)
                    .color(colors[12])
                    .rec(8, 8, 1, 1)
                    .rec(9, 0, 1, 3)
                    .rec(9, 7, 2, 1)
                    .rec(10, 0, 1, 1)
                    .rec(25, 8, 2, 1)
                    .rec(26, 1, 1, 2)
                    .rec(27, 0, 1, 3)
                    .color(colors[13])
                    .rec(9, 8, 3, 1)
                    .rec(10, 1, 1, 2)
                    .rec(11, 0, 1, 3)
                    .rec(12, 0, 1, 3)
                    .rec(14, 0, 1, 1)
                    .rec(14, 8, 1, 1)
                    .rec(15, 1, 1, 2)
                    .rec(21, 0, 1, 1)
                    .rec(21, 8, 1, 1)
                    .rec(22, 1, 1, 2)
                    .rec(23, 8, 2, 1)
                    .rec(24, 0, 1, 3)
                    .rec(25, 0, 1, 3)
                    .rec(26, 0, 1, 1)
                    .color(colors[14])
                    .rec(9, 10, 1, 2)
                    .rec(10, 4, 1, 2)
                    .rec(10, 10, 1, 2)
                    .rec(11, 4, 1, 2)
                    .color(colors[15])
                    .rec(12, 8, 1, 1)
                    .rec(13, 0, 1, 3)
                    .rec(15, 8, 5, 1)
                    .rec(16, 0, 1, 3)
                    .rec(17, 0, 1, 3)
                    .rec(18, 0, 1, 3)
                    .rec(19, 0, 1, 3)
                    .rec(20, 0, 1, 3)
                    .rec(22, 8, 1, 1)
                    .rec(23, 0, 1, 3)
                    .color(colors[16])
                    .rec(13, 8, 1, 1)
                    .rec(14, 1, 1, 2)
                    .rec(15, 0, 1, 1)
                    .rec(20, 8, 1, 1)
                    .rec(21, 1, 1, 2)
                    .rec(22, 0, 1, 1)
                    .close();
        }, 0, 0, true, true);
    }
}
